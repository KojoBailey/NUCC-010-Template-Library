#ifndef KOJO_NUCC_NUB_BT
#define KOJO_NUCC_NUB_BT

#ifndef KOJO_XFBIN_BT
    #include "functions.bt"
#endif // KOJO_XFBIN_BT

typedef struct {
    uint32 unk;
    uint32 unk;
    uint16 unk;
    uint16 unk;
    
    byte name_size <name = "Project Name Length">;
    char name[name_size] <name = "Project Name">;  
    uint32 unk; // Padding?
    
    uint32 unk;
    
    byte timestamp_size <name = "Timestamp Length">;
    char timestamp[timestamp_size] <name = "Timestamp">;
    align_by(4);
} PROP <name = "Properties", read = name>;

typedef struct {
    uint32 unk;
    uint32 unk;
    
    ubyte unk_size;
    char unk_str[unk_size];
    align_by(4);
    uint32 unk;
} BINF <name = "Binary File", read = unk_str>;

typedef struct {
    local int j;
    for (j = 0; !FEof(); j++) {
        struct {
            BigEndian();
            char magic[4] <name = "Container Format">;
            uint32 size <name = "Size">;
            if (size > 0) {
                char is14[4] <name = "Audio Format">;
                struct {
                    char sfmt[4] <name = "Header">;
                    uint32 size <name = "Format Size">;
                    uint32 channel_count <name = "Channel Count">;
                    uint32 sample_rate <name = "Sample Rate [Hz]">;
                    uint32 sample_size <name = "Sample Size">;
                    uint32 padding <name = "Padding">;
                    uint16 inserted_samples <name = "Inserted Samples">;
                    uint16 appended_samples <name = "Appended Samples">;
                } format <name = "Format Info">;
                struct {
                    char sdat[4] <name = "Header">;
                    uint32 size <name = "Data Size">;
                    ubyte data[size] <name = "Data">;
                } data <name = "Audio Data", open = true>;
            }
        } Entry;
    }
} PACK <name = "Pack Data">;

typedef struct {
    LittleEndian();
    char magic[4] <name = "File Magic">;
    uint32 size <name = "Size">;

    struct {
        char title[8] <name = "Title">;
        uint32 size <name = "Size">;
        uint32 count <name = "Count">;
        
        local int i;
        for (i = 0; i < count; i++) {
            struct {
                char header[4] <name = "Section Header">;
                uint32 size <name = "Section Size">;
            } Entry <open = false, read = header>;
        }
    } toc <name = "Table of Contents">;


    local int i;
    for (i = 0; i < toc.count; i++) {
        struct {
            char title[4] <name = "Title">;
            uint32 size <name = "Size">;
            
            switch (title) {
                case "PROP": PROP t_PROP; break;
                case "BINF": BINF t_BINF; break;
                case "PACK": PACK t_PACK; break;
                default: FSkip(size);
            }
        } section <name = "Section", read = title>;
    }
} NUB <name = "NUB Data">;

struct nuccNub {
    BigEndian();
    uint32 size <name = "Size">;
    NUB t_NUB;
};

#ifndef KOJO_XFBIN_BT
    nuccNub t_nuccNub <open = true>;
#endif // KOJO_XFBIN_BT

#endif // KOJO_NUCC_NUB_BT