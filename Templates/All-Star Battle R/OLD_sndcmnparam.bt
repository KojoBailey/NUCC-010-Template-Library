//------------------------------------------------
//--- 010 Editor v14.0.1 Binary Template
//
//      File: sndcmnparam.bt
//   Authors: Kojo Bailey
//  Git Repo: https://github.com/KojoBailey/XFBIN-010-Binary-Templates
//   Version: 1.0.0
//   Purpose: Parsing CyberConnect2 NUCC sndcmnparam files for easy hex editing.
//  Category: Game
//   History: 
//      1.0.0 [2024/04/XX] Initial release.
//
//--- For more info, refer to README.md
//------------------------------------------------

string GetChunkDataType(string Title) {
    switch (Title) {
        case "cridata": 
            return "CRI ADX2 (ACB/AWB) sound files"; break;
        case "pldata":
            return "Player XFBIN sound files"; break;
        default:
            return "XFBIN sound files"; break;
    }
}

typedef struct {
    local string Title = GetChunkName(i);
    local string Read = GetFilePath(i);
    local string Comment = "List of XFBIN audio files.";

    BigEndian();
    SetBackColor(cPurple);
    uint32 ChunkSize <name = "uint32 Chunk Size", comment = "Should be Count * 32 + 2">;
    SetBackColor(cNone);
    FSkip(8);
    SetBackColor(cPurple);
    uint32 DataSize <name = "uint32 Data Size", comment = "Should be Chunk Size - 4">;
    LittleEndian();
    uint16 Count <name = "uint16 Entry Count">;
    
    local int i;
    for (i = 0; i < Count; i++ ) {
        SwitchColors(i);
        struct {
            char ID[32];
        } IDs <name = "char ID", read = ID>;
    }

    local uint64 ExpectedSize = Count * 32 + 2;
    Printf("\n~~ %s ~~\n", Title);
    Printf("Entry Count = %d\nData Size should = %d\nChunk Size should = %d\n\n",
        Count,
        ExpectedSize,
        ExpectedSize + 4
    );
} TSndcmnparam;

typedef struct {
    local string Title = GetChunkName(i);
    local string Read = GetFilePath(i);
    local string Comment = "List of XFBIN player audio files, including PL, SPL, and _ev.";

    BigEndian();
    SetBackColor(cPurple);
    uint32 ChunkSize <name = "uint32 Chunk Size", comment = "Should be Count * 212 + 2">;
    SetBackColor(cNone);
    FSkip(8);
    SetBackColor(cPurple);
    uint32 DataSize <name = "uint32 Data Size", comment = "Should be Chunk Size - 4">;
    LittleEndian();
    uint16 Count <name = "uint32 Entry Count">;

    local int i;
    for (i = 0; i < Count; i++) {
        SwitchColors(i);
        struct {
            char CharID[32] <name = "char Character ID">;
            char PL[32] <name = "char Sound Effects File">;
            char NULL1[32];
            char SPL[32] <name = "char Special File">;
            char NULL2[32];
            char EV[32] <name = "char _ev File">;
            struct {
                float StandIndex <name = "float Stand Index">;
                float unk2;
                float unk3;
                float Entity;
                float CharIndex <name = "float Character Index">;
            } Floats <read = Str("Character: %d | Stand: %d", CharIndex, StandIndex)>;
        } Entry <read = Str("%s - %s", CharID, CharIdToFullName(Str(CharID)))>;
    }

    local uint64 ExpectedSize = Count * 212 + 2;
    Printf("\n~~ %s ~~\n", Title);
    Printf("Entry Count = %d\nData Size should = %d\nChunk Size should = %d\n\n",
        Count,
        ExpectedSize,
        ExpectedSize + 4
    );
} TPldata;

string GetAdx2Type(float Type) {
    switch (Str("%d", Type)) { // String is necessary for -1 value to work
        case "-1": return "N/A";
        case "0": return "System Battle";
        case "1": return "System Etc.";
        case "2": return "Title";
        case "3": return "Character Select";
        case "4": return "Card";
        case "5": return "Gallery";
        case "6": return "Character Battle";
        case "8": return "Mob";
        default: return "Character System (DLC)";
    }
}

typedef struct {
    local string Title = GetChunkName(i);
    local string Read = GetFilePath(i);
    local string Comment = "List of CRI ADX2 audio files.";

    BigEndian();
    SetBackColor(cPurple);
    uint32 ChunkSize <name = "uint32 Chunk Size", comment = "Should be Count * 178 + 2">;
    SetBackColor(cNone);
    FSkip(8);
    SetBackColor(cPurple);
    uint32 DataSize <name = "uint32 Data Size", comment = "Should be Chunk Size - 4">;
    LittleEndian();
    uint16 Count <name = "uint16 Entry Count">;

    local int i;
    for (i = 0; i < Count; i++) {
        SwitchColors(i);
        struct {
            struct {
                float Files <name = "float File Count", comment = "Starts at 0 so that 0 = 1">;
                float unk;
                float Index;
                float Type <comment = GetAdx2Type>;
            } Floats <read = Str("File Count: %d | Index: %d | Type: %d", Files, Index, Type)>;
            char File1[64] <name = "char File 1", comment = "Usually ACB file">;
            char File2[64] <name = "char File 2", comment = "Usually AWB file">;
            char File3[32] <name = "char File 3", comment = "Usually NULL">;
            char padding[2] <hidden = true>;
        } Entry <read=File1>;
    }

    // Display expected size data
    local uint64 ExpectedSize = Count * 178 + 2;
    Printf("\n~~ %s ~~\n", Title);
    Printf("Entry Count = %d\nData Size should = %d\nChunk Size should = %d\n\n",
        Count,
        ExpectedSize,
        ExpectedSize + 4
    );
} TCridata;