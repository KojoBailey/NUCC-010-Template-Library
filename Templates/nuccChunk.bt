#ifndef KOJO_NUCC_CHUNK_BT
#define KOJO_NUCC_CHUNK_BT

#include "nuccIndex.bt"
#include "nuccPage.bt"
#include "nuccBinary.bt"
#include "nuccTexture.bt"
#include "nuccAnm.bt"
#include "nuccNub.bt"

/* -- ↓ CHUNK FUNCTIONS ↓ -- */

string get_chunk_read(string type, string path, string name) {
    if (type == "nuccChunkNull" && Show_nuccChunkNull_Name == 0) return "";
    if (type == "nuccChunkPage" && Show_nuccChunkPage_Name == 0) return "";
    if (name == "") return type;
    return Str("%s [%s]", name, type);
}

struct nuccUnknown(uint size) {
    byte data[size] <name = "Unknown Data">;
};

struct nuccCamera {
    uint32 unk00;
    float focal_length <name = "Focal Length">;
};


/* -- ↓ MAIN STRUCT ↓ -- */

struct nuccChunk(int i) {
    BigEndian();
    local string type;
    local string path;
    local string name;

    uint32 size <name = "Size">;
    uint32 map_index <name = "Map Index">;
    uint16 version <name = "Version", comment = version_to_string>;
    uint16 unk;

    // Assumed to be nuccChunkIndex if first chunk (not really any way to get around this).
    if (i > 0) {
        type = get_type(map_index);
        path = get_path(map_index);
        name = get_name(map_index);

        if (type != "nuccChunkPage" && type != "nuccChunkNull") {
            page_read = get_chunk_read(type, path, name);
        }

        define_map(map_index);
        
        switch (type) {
            case "nuccChunkPage":
                SetBackColor(COL_ORANGE);
                nuccPage t_nuccPage <name = "nuccPage", read = nuccPageREAD(),
                    comment = "Marks the end of a page of chunks. Something to do with nuccClumps.">;
                break;
            case "nuccChunkBinary":
                SetBackColor(COL_ORANGE);
                nuccBinary t_nuccBinary(path) <name = "nuccBinary",
                    comment = "Stores miscellaneous binary data, including formats like XML.">;
                break;
            case "nuccChunkTexture":
                SetBackColor(COL_BLUE);
                nuccTexture t_nuccTexture <name = "nuccTexture", read = nuccTextureREAD(),
                    comment = "Stores NUCC textures, like NUT, but can also store uncontained images.">;
                break;
            case "nuccChunkAnm":
                nuccAnm t_nuccAnm <comment = "Stores animation data, 2D and 3D.">;
                break;
            case "nuccChunkCamera":
                SetBackColor(COL_BLUE);
                nuccCamera t_nuccCamera <name = "nuccCamera", read = focal_length,
                    comment = "Something camera-related.">;
                break;
            case "nuccChunkNub":
                SetBackColor(COL_LIGHT_PINK);
                nuccNub t_nuccNub <name = "nuccNub",
                    comment = "Stores NUB audio data.">;
                break;
            case "nuccChunkNull": break; // Removes annoying empty struct warnings.
            default: 
                SetBackColor(COL_DARK_RED);
                nuccUnknown t_nuccUnknown(size) <name = "nuccUnknown",
                    comment = "Currently unsupported.">;
        }
    } else {
        type = "nuccChunkIndex";
        path = "";
        name = "index";
        nuccIndex t_nuccIndex <name = "nuccIndex", comment = "Contains meta-information on all the chunks, including itself.">;
    }
};

#endif // KOJO_NUCC_CHUNK_BT